using Test

module mpart1
using StaticArrays
using Test
using CoNCMOR: pointpartitioning2d
function test()
    points = [SVector{2}([1.0, 0.0]), SVector{2}([1.0, 1.0]), SVector{2}([-1.0, -1.0]), SVector{2}([-1.0, 1.0])]
    p = pointpartitioning2d(points, 2)
@test isapprox(p, [1, 1, 2, 2])
end
end
using .mpart1
mpart1.test()

module mpart2
using StaticArrays
using Test
using PlotlyJS
using CoNCMOR: pointpartitioning2d
colors = ["rgb(164, 194, 244)", "rgb(194, 194, 144)", "rgb(194, 144, 244)", "rgb(164, 244, 144)", "rgb(164, 194, 244)", "rgb(255, 217, 102)", "rgb(234, 153, 153)", "rgb(142, 124, 195)"]
function test()
    points = [SVector{2}([rand(), rand()])  for idx in 1:1000]
    ppartitioning = pointpartitioning2d(points, 8)
    partitionnumbers = unique(ppartitioning)
    # data = PlotlyBase.AbstractTrace[]
    # for gp in partitionnumbers
    #     trace1 = scatter(; 
    #         x=[points[i][1] for i in 1:length(points) if ppartitioning[i] == gp], 
    #         y=[points[i][2] for i in 1:length(points) if ppartitioning[i] == gp] ,
    #       mode="markers",
    #       marker=attr(color=colors[gp], size=12,
    #           line=attr(color="white", width=0.5))
    #       )
    #     push!(data, trace1)
    # end
    # layout = Layout(;title="Quarter 1 Growth",
    #     xaxis=attr(title="x", zeroline=false),
    #     yaxis=attr(title="y", zeroline=false))

    # pl = plot(data, layout)
    # display(pl)
end
end
using .mpart2
mpart2.test()


module mpart3
using StaticArrays
using Test
using PlotlyJS
using CoNCMOR: pointpartitioning2d, CoNCData, nclusters, nfuncspercluster
using CoNCMOR: nbasisfunctions, transfmatrix, LegendreBasis
colors = ["rgb(164, 194, 244)", "rgb(194, 194, 144)", "rgb(194, 144, 244)", "rgb(164, 244, 144)", "rgb(164, 194, 244)", "rgb(255, 217, 102)", "rgb(234, 153, 153)", "rgb(142, 124, 195)"]
function test()
    # @show points = [SVector{2}([rand(), rand()])  for idx in 1:30]
    points = StaticArrays.SArray{Tuple{2},Float64,1,2}[[0.6501312860170676, 0.889978628556229], [0.19162369745368268, 0.5000498373796463], [0.9513777178320113, 0.9313997945413548], [0.6715708752191747, 0.0031159439825900748], [0.908983887358429, 0.33697103964932174], [0.8630730459099334, 0.8172618688642774], [0.21191150611345178, 0.6279042354095665], [0.0017150255179243512, 0.7401108604352873], [0.045937411259845184, 0.3867144891772889], [0.07794203801162314, 0.45466525770422384], [0.11103905573968631, 0.7213589211503646], [0.522501483190954, 0.9505399568028736], [0.14011031960881337, 0.5976293299997106], [0.15824295891177775, 0.4538838028009915], [0.22532364404660643, 0.7490903677067646], [0.16495650937348727, 0.4095197672868107], [0.2929326909660668, 0.2627344309574493], [0.7749630590488474, 0.010281406373283675], [0.23137166232629092, 0.1872554576301051], [0.48014323786400226, 0.8846143614245845], [0.26528544579757507, 
    0.6924068278632542], [0.2839884809072999, 0.09439141875666568], [0.942287809602099, 0.4005321413670275], [0.026409937646382442, 0.6845508696068237], [0.7752785557256849, 0.3285662200502397], [0.09380966727246509, 0.15933031973012612], [0.2813301059379758, 0.15216808040457552], [0.4780694864591679, 0.6063568972874278], [0.6982811071004462, 0.5308171330635794], [0.9609668367122937, 0.09387988328210572]]  
    ppartitioning = pointpartitioning2d(points, 8)
    partitionnumbers = unique(ppartitioning)
    # data = PlotlyBase.AbstractTrace[]
    # for gp in partitionnumbers
    #     trace1 = scatter(; 
    #         x=[points[i][1] for i in 1:length(points) if ppartitioning[i] == gp], 
    #         y=[points[i][2] for i in 1:length(points) if ppartitioning[i] == gp] ,
    #       mode="markers",
    #       marker=attr(color=colors[gp], size=12,
    #           line=attr(color="white", width=0.5))
    #       )
    #     push!(data, trace1)
    # end
    # layout = Layout(;title="Quarter 1 Growth",
    #     xaxis=attr(title="x", zeroline=false),
    #     yaxis=attr(title="y", zeroline=false))

    # pl = plot(data, layout)
    # display(pl)
    mor = CoNCData(points, ppartitioning)
    @test nclusters(mor) == length(partitionnumbers)
    I, J, V  = transfmatrix(mor, LegendreBasis, 1)
    @test nfuncspercluster(mor) == 1
    @test nbasisfunctions(mor) == 8
    # @show I, J, V

    @test (I, J, V) == ([1, 3, 6, 12, 28, 29, 5, 23, 25, 4, 18, 30, 15, 20, 21, 2, 7, 8, 11, 13, 24, 9, 10, 14, 16, 17, 19, 22, 26, 27], [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 
7, 7, 8, 8, 8, 8, 8], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])     
end
end
using .mpart3
mpart3.test()


module mpart4
using StaticArrays
using Test
using PlotlyJS
using CoNCMOR: pointpartitioning2d, CoNCData, nclusters, nfuncspercluster
using CoNCMOR: nbasisfunctions, transfmatrix, LegendreBasis, basisfunctionnumbers
colors = ["rgb(164, 194, 244)", "rgb(194, 194, 144)", "rgb(194, 144, 244)", "rgb(164, 244, 144)", "rgb(164, 194, 244)", "rgb(255, 217, 102)", "rgb(234, 153, 153)", "rgb(142, 124, 195)"]
function test()
    # @show points = [SVector{2}([rand(), rand()])  for idx in 1:100]
    points = StaticArrays.SArray{Tuple{2},Float64,1,2}[[0.3498176523034817, 0.3549660479905694], [0.9760212677554254, 0.15177308361586017], [0.559571247100549, 0.64684829237012], [0.6287604213516029, 0.4015035267288283], [0.6103015260032139, 0.6525700412958231], [0.9263583540789906, 0.9327907430965177], [0.6028419027446916, 0.4925407963622508], 
    [0.5070663109452882, 0.8638292632681093], [0.12683983753484696, 0.31063179285583087], [0.922472465396579, 0.5835713871035031], [0.5765445382214784, 0.031742403699497546], [0.8813066975665198, 0.1016825228296303], [0.11915737698397932, 0.35943224645651894], [0.1496295050389571, 0.9409059276282588], [0.9249043325729251, 0.8582383375285798], [0.7003816507984837, 0.015864384653934804], [0.4183732808024381, 0.062089501205454756], [0.7828910985685409, 0.3897754633148718], [0.814387562915863, 0.7661531848119394], [0.9378250408749993, 0.4419072162597786], [0.9930843684484252, 0.0808907099447389], [0.9098708794453141, 0.16346209443125015], [0.9411836818920423, 0.05534797273173098], [0.4187470463872005, 0.7317472992129386], [0.772809996959025, 0.018217774214952076], [0.9865533369227173, 0.6666949410537888], [0.4499758134659346, 0.023785300548317956], [0.029796223225835305, 0.9211670787226471], [0.5214565048421462, 0.11159570893631665], [0.1860912419494969, 0.2078176265858569], [0.820061449928013, 0.4110571607559492], [0.6206914509081543, 0.7423933505027895], [0.23753058155663265, 0.31230367282886395], [0.0716715514430677, 0.9837989121751367], [0.34700676754051507, 0.2616642999585894], [0.8885302038682481, 0.4267737466261221], [0.5698700471919143, 0.27047357608013756], [0.9575313097519784, 0.47015843883053865], [0.030880755758563305, 0.32532028926864354], [0.6120064676728401, 0.714903172207717], [0.41014131824181166, 0.4175999420684269], [0.5776591340118755, 0.11381292608006022], [0.16210511797040383, 0.9479190915891038], [0.24098387663251253, 0.016528532304052934], [0.6360329576487627, 0.9255495551229482], [0.6063577557754687, 0.7500608207622954], [0.669862740935931, 0.1474404581203963], [0.1509398380924587, 0.007078937463835144], [0.7570945259834478, 0.4792071565003708], [0.8463429586989513, 0.3362916596777008], [0.8718805257572253, 0.9505045956340563], [0.9378172883017271, 0.6558535675023265], [0.7607175207267962, 0.16278039066615912], [0.3033432293669276, 0.4236027199728114], [0.5735451379372858, 0.0016973229792631717], [0.5658962751971406, 0.4990902842726177], [0.7749429396416292, 0.1657953725256056], [0.9998503038834983, 0.09231603727269477], [0.14606668921275112, 0.8211367593005814], [0.17436818046608793, 0.14266577702390482], [0.2869241118467081, 0.18982326976657427], [0.9570389095863823, 0.8430302702320338], [0.963002150097042, 0.8734476195390102], [0.02310333018886035, 0.5916224797963232], [0.11827736904206887, 0.614823615361406], [0.14234994749862606, 0.6921969290147114], [0.9549050683254656, 0.9380696127171313], [0.3744844254040125, 0.5952619014446849], [0.4978765771727567, 0.4751949550099679], [0.599203379855427, 0.8935047843968706], [0.7843441575560028, 0.1996557312731324], [0.5358646534266436, 0.5711713616059089], [0.6042050607480427, 0.23247479209284583], [0.103031753853708, 0.5202084476871096], [0.7817060444793906, 0.06298759214098548], [0.10476334496398665, 0.8353480406394247], [0.2240185490219262, 0.32647577964379715], [0.07142190195982012, 0.7062711020191337], [0.4285221294122832, 0.37071413478332826], [0.7431595730375058, 0.09241639356409292], [0.689344507684208, 0.6414569372820336], [0.2921251493291417, 0.20497939587659508], [0.3221951994445349, 0.938867426237946], [0.6189063389468588, 0.1565548968165449], [0.6873503374150429, 0.4811478908051645], [0.04696287058068682, 0.8716935021172936], [0.0410265506457721, 0.54168877005652], [0.22512565583676336, 0.8680515458121365], [0.23608839464960152, 0.2417146197690787], [0.6094844694881529, 0.36785268942388205], [0.6108409687452105, 0.09123727597174613], [0.26791787160450253, 0.15869447529541914], [0.7457080734211563, 0.01582110449811225], [0.06328509319367792, 0.4587801457026919], [0.36586068811262873, 0.9362478857857717], [0.9463359113964482, 0.0002737405127948289], [0.10797945848288792, 0.08793984219952589], [0.6776972097340463, 0.6752838440165989], [0.8927288791532846, 0.8582705481767292], 
    [0.38484579345602854, 0.7254803008016062]]
    ppartitioning = pointpartitioning2d(points, 8)
    partitionnumbers = unique(ppartitioning)
    # data = PlotlyBase.AbstractTrace[]
    # for gp in partitionnumbers
    #     trace1 = scatter(; 
    #         x=[points[i][1] for i in 1:length(points) if ppartitioning[i] == gp], 
    #         y=[points[i][2] for i in 1:length(points) if ppartitioning[i] == gp] ,
    #       mode="markers",
    #       marker=attr(color=colors[gp], size=12,
    #           line=attr(color="white", width=0.5))
    #       )
    #     push!(data, trace1)
    # end
    # layout = Layout(;title="Clusters",
    #     xaxis=attr(title="x", zeroline=false),
    #     yaxis=attr(title="y", zeroline=false))

    # pl = plot(data, layout)
    # display(pl)
    mor = CoNCData(points, ppartitioning)
    @test nclusters(mor) == length(partitionnumbers)
    I, J, V  = transfmatrix(mor, LegendreBasis, 2)
    @test nfuncspercluster(mor) == 3
    @test nbasisfunctions(mor) == 8*3
    # @show I, J, V
    @test (I, J, V) == ([6, 15, 19, 45, 51, 62, 63, 67, 99, 6, 15, 19, 45, 51, 62, 63, 67, 99, 6, 15, 19, 45, 51, 62, 63, 67, 99, 3, 5, 8, 24, 32, 40, 46, 56, 70, 72, 81, 83, 95, 98, 100, 3, 5, 8, 24, 32, 40, 46, 56, 70, 72, 81, 83, 95, 98, 100, 3, 5, 8, 24, 32, 40, 46, 56, 70, 72, 81, 83, 95, 98, 100, 14, 28, 34, 43, 59, 64, 65, 66, 76, 78, 86, 87, 88, 14, 28, 34, 43, 59, 64, 65, 66, 76, 78, 86, 87, 88, 14, 28, 34, 43, 59, 64, 65, 66, 76, 78, 86, 87, 88, 1, 9, 13, 30, 33, 39, 41, 54, 68, 69, 74, 77, 79, 89, 94, 1, 9, 13, 30, 33, 39, 41, 54, 68, 69, 74, 77, 79, 89, 94, 1, 9, 13, 30, 33, 39, 41, 54, 68, 69, 74, 77, 79, 89, 94, 4, 7, 10, 18, 20, 26, 31, 36, 38, 49, 50, 52, 85, 90, 4, 7, 10, 18, 20, 26, 31, 36, 38, 49, 50, 52, 85, 90, 4, 7, 10, 18, 20, 26, 31, 36, 38, 49, 50, 52, 85, 90, 2, 12, 21, 22, 23, 25, 53, 57, 58, 71, 75, 80, 96, 2, 12, 21, 22, 23, 25, 53, 57, 58, 71, 75, 80, 96, 2, 12, 21, 22, 23, 25, 53, 57, 58, 71, 75, 80, 96, 11, 16, 27, 29, 37, 42, 47, 55, 73, 84, 91, 93, 11, 16, 27, 29, 37, 42, 47, 55, 73, 84, 91, 93, 11, 16, 27, 29, 37, 42, 47, 55, 73, 84, 91, 93, 17, 35, 44, 48, 60, 61, 82, 92, 97, 17, 35, 44, 48, 60, 61, 82, 92, 97, 17, 35, 44, 48, 60, 61, 82, 92, 97], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.7758578063965592, 0.7669638705784596, 0.09095663681105258, -1.0, 0.4426286852439131, 0.9635241444858568, 1.0, 0.9504718979121727, 0.5701535645143484, 0.807825148084915, -0.0009823922042605908, -1.0, 0.7292666174907929, 1.0, -0.1659723668263747, 0.1640207606612849, 0.8650947897662287, -0.0006329438544404695, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.29307637154013794, 0.5694232296938155, 0.007062289656122413, -0.47404587302320567, 0.6260210479207148, 0.5787106864933432, 0.5479400339517133, 0.3275311721057034, 0.50896746470274, 0.16393766343487934, 1.0, -1.0, -0.7621377042628704, 0.9365527991540797, -0.6587187141281733, -0.3280323418484928, -0.30201121260046926, 0.6587445967087001, 0.05806779270334794, 0.10648345724777893, -0.018535220040545475, 0.14135325618839947, -1.0, 0.7937016842742061, -0.6721927064641573, -0.35255091989005666, 1.0, 0.9880869640451627, -0.19871433537183614, 0.029567000764386883, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2525959637808981, -0.9337410554451319, -0.5191796639461023, 0.3761032334990974, 0.21732445787401647, -1.0, -0.057786919856731934, 0.18052910169538472, -0.1915743518619975, -0.5216511678499102, -0.7637930331184252, -0.822561982697403, 1.0, 0.8059624493510492, 0.7166686421064474, 1.0, 0.837688317150587, 0.2641555242543447, -0.7741119011632802, -0.669155541402332, -0.31913727092100713, 0.3284439446499594, -0.25546909566957304, 0.4928620749543193, -1.0, 0.4763867401533368, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.36590899498453194, -0.5890366578197945, -0.6219382821966594, -0.3352810493211138, -0.11498212051544218, -1.0, 0.6242567710123905, 0.1668732828626691, 0.4715492254509756, 1.0, -0.6909993846341007, -0.17285001532352956, 0.7029761527610722, -0.12115856510402023, -0.8612221525366747, -0.24041504312676415, -0.46926991600308937, -0.21736038078815112, -1.0, -0.46063961698193456, -0.3934474178223398, 0.08290316360466424, 0.11388969918618362, 1.0, 0.38021050135034, 0.6125716206031314, -0.3874827387697217, -0.15912290480056518, -0.8250226141781408, 0.29547671963033895, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.8649061961761284, -1.0, 0.6659944644943392, -0.06153854283990845, 0.7460159291207874, 1.0, 0.13220262851245035, 0.48907890501386175, 0.8487299330398692, -0.19599673348702137, 0.26918842789180775, 0.7459755207691893, -0.5595208943857378, -0.9653772801548601, -0.6052589624441485, -0.05419137465105044, 0.4968357844142069, -0.6762513773203602, -0.360686999583041, 1.0, -0.5474288223357859, -0.45229304883671356, -0.18967645481425247, -0.13490267876611273, -1.0, 0.9343749038671205, -0.12315500908976582, -0.8089545018152753, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8143366061599658, 0.07637018347887725, 0.9472833677104416, 0.29892735790160324, 0.542900347058855, -0.7689793953696861, -0.8631976493157852, -0.7523606208968054, 1.0, 
-0.6791112450164265, -0.6996660431419187, -1.0, 0.5830438262365054, 0.5196893413023602, 0.017231114305920565, -0.19133148260268099, 0.6369417648619231, -0.44755058359170635, -0.8200034653708875, 0.6301035969562726, 0.6603468686574823, -0.07672406711459495, 1.0, -0.37091759000867475, -0.07571739353273889, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.14403166719310076, 0.6934631167425852, -1.0, -0.5165850936449419, -0.189170408773575, -0.13649379634623512, 0.4870675759437985, -0.16431623327085507, 0.04303296032337295, 0.14245585183370094, 0.0879107697187539, 1.0, -0.7764305412133403, -0.8945810017720979, -0.8356404085984118, -0.18223143087118243, 1.0, -0.16573282194897665, 0.08449413562167853, -1.0, 0.7172459728201478, 0.15231589138317317, -0.3337212498540358, -0.8949030551925413, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5401550666916867, -0.14299571328003635, -0.7231879211478436, -0.5722291024538956, 0.15301684825155312, 0.18652935467688495, 0.030551522748788227, -1.0, -0.5678418963089199, 1.0, -0.9257648220807471, -1.0, 0.06515817116440412, 0.4356232464582842, 0.5546884272801637, 0.19107820140058543, -0.3647639130285279]) 
bfn = [            
[1, 2, 3],                                                                                                                                                         
[4, 5, 6],                                                                                                                                                         
[7, 8, 9],                                                                                                                                                         
[10, 11, 12],                                                                                                                                                      
[13, 14, 15],                                                                                                                                                      
[16, 17, 18],                                                                                                                                                      
[19, 20, 21],                                                                                                                                                      
[22, 23, 24],  
] 
    for i in 1:nclusters(mor)
        @test basisfunctionnumbers(mor, i) == bfn[i]
    end
end
end
using .mpart4
mpart4.test()

          


